.data
printString: 
	.asciz "%s"
printNum:
	.asciz "%d"
helloworld: 
	.asciz "Hello World!"
newline:
	.asciz "\n"

.text
.global main

main:
	ldr r0, =printString
	ldr r1, =helloworld
	bl printf
	bl printNewLine

immToReg:
	ldr r0, =printNum
	ldr r1, =1000000
	bl printf
	bl printNewLine

regToReg:
	ldr r2, =2000000
	mov r1, r2
	ldr r0, =printNum
	bl printf
	bl printNewLine

immToMem:
	ldr r2, =100		@ R2 = 100, put imm to register
	mov r3, sp			@ R3 = SP (address), load addr to register
	str r2, [r3]		@ [R3+0] = R2, store register in mem
	ldr r1, [r3]		@ R1 = [R3+0], access mem
	ldr r0, =printNum
	bl printf
	bl printNewLine
	
regToMem:
	@ Same as above, without the ldr r2, =100!
	
terminate:
	mov r0, #0
	b exit

printNewLine:
	push {r0, r1, lr}
	ldr r0, =printString
	ldr r1, =newline
	bl printf
	pop {r0, r1, lr}
	mov pc, lr
